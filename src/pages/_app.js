
import React, { useEffect, useState } from 'react'

import Head from 'next/head'
import Layout from '../components/layouts/Layout'
import SuperTokensReact from 'supertokens-auth-react'
import * as SuperTokensConfig from '../../config/frontendConfig'
import Session from 'supertokens-auth-react/recipe/session'
import { redirectToAuth } from 'supertokens-auth-react/recipe/thirdpartyemailpassword'

async function initNode() {



  const supertokensNode = await import('supertokens-node')
  const { backendConfig } = await import('../../config/backendConfig')
  supertokensNode.init(backendConfig())
}

if (typeof window !== 'undefined') {
  SuperTokensReact.init(SuperTokensConfig.frontendConfig())
} else {
  initNode().catch(console.error)
}


function App({ Component, pageProps }) {

  const [isLogged, setIsLogged] = React.useState(null)

  useEffect(() => {
    async function doRefresh() {
      if (pageProps.fromSupertokens === 'needs-refresh') {
        if (await Session.attemptRefreshingSession()) {
          location.reload()
        } else {
          // user has been logged out
          redirectToAuth()
        }
      }
    }
    doRefresh()

  }, [pageProps.fromSupertokens])


  useEffect(() => {
    const checkSession = async () => {

      //Si existe una sesi√≥n activa, la promesa devuelve true
      setIsLogged(await Session.doesSessionExist())
    }
    checkSession()

  }, [])

  if (pageProps.fromSupertokens === 'needs-refresh') {
    return null
  }

  pageProps.isLogged = isLogged

  pageProps.hola = "hola"
  return (
    <>

      <Head>
        <meta name="google-site-verification" content="zbvzA8Zrgps5RRh86gp797a6HsdJkBRhP5vY0K0KkjQ" />
        <title>Sevimatic</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <Component {...pageProps} />



    </>
  )

}

export default App

